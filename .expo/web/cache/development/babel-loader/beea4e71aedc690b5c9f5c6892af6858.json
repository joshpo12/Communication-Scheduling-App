{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ikaur2/Desktop/scheduling-app-mobile/screens/Scheduling.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useState } from 'react';\nimport Calendar from 'react-calendar';\n\nvar ReactCalendar = function (_Component) {\n  _inherits(ReactCalendar, _Component);\n\n  var _super = _createSuper(ReactCalendar);\n\n  function ReactCalendar(props) {\n    var _this;\n\n    _classCallCheck(this, ReactCalendar);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedStartDate: null\n    };\n    _this.onDateChange = _this.onDateChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ReactCalendar, [{\n    key: \"onDateChange\",\n    value: function onDateChange(date) {\n      this.setState({\n        selectedStartDate: date\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Calendar, {\n        onChange: function onChange(range) {\n          return console.log(range);\n        },\n        minDate: new Date(2018, 3, 20),\n        startDate: new Date(2018, 3, 30),\n        endDate: new Date(2018, 4, 5),\n        theme: {\n          activeDayColor: {},\n          monthTitleTextStyle: {\n            color: '#6d95da',\n            fontWeight: '300',\n            fontSize: 16\n          },\n          emptyMonthContainerStyle: {},\n          emptyMonthTextStyle: {\n            fontWeight: '200'\n          },\n          weekColumnsContainerStyle: {},\n          weekColumnStyle: {\n            paddingVertical: 10\n          },\n          weekColumnTextStyle: {\n            color: '#b6c1cd',\n            fontSize: 13\n          },\n          nonTouchableDayContainerStyle: {},\n          nonTouchableDayTextStyle: {},\n          startDateContainerStyle: {},\n          endDateContainerStyle: {},\n          dayContainerStyle: {},\n          dayTextStyle: {\n            color: '#2d4150',\n            fontWeight: '200',\n            fontSize: 15\n          },\n          dayOutOfRangeContainerStyle: {},\n          dayOutOfRangeTextStyle: {},\n          todayContainerStyle: {},\n          todayTextStyle: {\n            color: '#6d95da'\n          },\n          activeDayContainerStyle: {\n            backgroundColor: '#6d95da'\n          },\n          activeDayTextStyle: {\n            color: 'white'\n          },\n          nonTouchableLastMonthDayTextStyle: {}\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n\n  return ReactCalendar;\n}(Component);\n\nexport { ReactCalendar as default };","map":{"version":3,"sources":["/Users/ikaur2/Desktop/scheduling-app-mobile/screens/Scheduling.js"],"names":["React","Component","useState","Calendar","ReactCalendar","props","state","selectedStartDate","onDateChange","bind","date","setState","range","console","log","Date","activeDayColor","monthTitleTextStyle","color","fontWeight","fontSize","emptyMonthContainerStyle","emptyMonthTextStyle","weekColumnsContainerStyle","weekColumnStyle","paddingVertical","weekColumnTextStyle","nonTouchableDayContainerStyle","nonTouchableDayTextStyle","startDateContainerStyle","endDateContainerStyle","dayContainerStyle","dayTextStyle","dayOutOfRangeContainerStyle","dayOutOfRangeTextStyle","todayContainerStyle","todayTextStyle","activeDayContainerStyle","backgroundColor","activeDayTextStyle","nonTouchableLastMonthDayTextStyle"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;;;;;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;IAIuBC,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAGA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AALiB;AAMlB;;;;iCAEYC,I,EAAM;AACjB,WAAKC,QAAL,CAAc;AACZJ,QAAAA,iBAAiB,EAAEG;AADP,OAAd;AAGD;;;6BACO;AACN,aACE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,kBAACE,KAAD;AAAA,iBAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;AAAA,SAApB;AACN,QAAA,OAAO,EAAE,IAAIG,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CADH;AAEN,QAAA,SAAS,EAAE,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAFL;AAGN,QAAA,OAAO,EAAE,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAHH;AAIN,QAAA,KAAK,EAAE;AACLC,UAAAA,cAAc,EAAE,EADX;AAELC,UAAAA,mBAAmB,EAAE;AACnBC,YAAAA,KAAK,EAAE,SADY;AAEnBC,YAAAA,UAAU,EAAE,KAFO;AAGnBC,YAAAA,QAAQ,EAAE;AAHS,WAFhB;AAOLC,UAAAA,wBAAwB,EAAE,EAPrB;AAQLC,UAAAA,mBAAmB,EAAE;AACnBH,YAAAA,UAAU,EAAE;AADO,WARhB;AAWLI,UAAAA,yBAAyB,EAAE,EAXtB;AAYLC,UAAAA,eAAe,EAAE;AACfC,YAAAA,eAAe,EAAE;AADF,WAZZ;AAeLC,UAAAA,mBAAmB,EAAE;AACnBR,YAAAA,KAAK,EAAE,SADY;AAEnBE,YAAAA,QAAQ,EAAE;AAFS,WAfhB;AAmBLO,UAAAA,6BAA6B,EAAE,EAnB1B;AAoBLC,UAAAA,wBAAwB,EAAE,EApBrB;AAqBLC,UAAAA,uBAAuB,EAAE,EArBpB;AAsBLC,UAAAA,qBAAqB,EAAE,EAtBlB;AAuBLC,UAAAA,iBAAiB,EAAE,EAvBd;AAwBLC,UAAAA,YAAY,EAAE;AACZd,YAAAA,KAAK,EAAE,SADK;AAEZC,YAAAA,UAAU,EAAE,KAFA;AAGZC,YAAAA,QAAQ,EAAE;AAHE,WAxBT;AA6BLa,UAAAA,2BAA2B,EAAE,EA7BxB;AA8BLC,UAAAA,sBAAsB,EAAE,EA9BnB;AA+BLC,UAAAA,mBAAmB,EAAE,EA/BhB;AAgCLC,UAAAA,cAAc,EAAE;AACdlB,YAAAA,KAAK,EAAE;AADO,WAhCX;AAmCLmB,UAAAA,uBAAuB,EAAE;AACvBC,YAAAA,eAAe,EAAE;AADM,WAnCpB;AAsCLC,UAAAA,kBAAkB,EAAE;AAClBrB,YAAAA,KAAK,EAAE;AADW,WAtCf;AAyCLsB,UAAAA,iCAAiC,EAAE;AAzC9B,SAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAiDD;;;;EAhEwCvC,S;;SAAtBG,a","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, Text, View, ImageBackground, Image, SafeAreaView, TextInput, Dimensions, BackHandler, Button, Alert } from 'react-native';\nimport { useState } from 'react';\nimport Calendar from 'react-calendar';\n// const ReactCalendar =()=> {\n//   const [date, setDate] = useState(new Date());\n\n  export default class ReactCalendar extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        selectedStartDate: null,\n      };\n      this.onDateChange = this.onDateChange.bind(this);\n    }\n   \n    onDateChange(date) {\n      this.setState({\n        selectedStartDate: date,\n      });\n    }\n    render(){\n      return (\n        <Calendar onChange={(range) => console.log(range)}\n  minDate={new Date(2018, 3, 20)}\n  startDate={new Date(2018, 3, 30)}\n  endDate={new Date(2018, 4, 5)}\n  theme={{\n    activeDayColor: {},\n    monthTitleTextStyle: {\n      color: '#6d95da',\n      fontWeight: '300',\n      fontSize: 16,\n    },\n    emptyMonthContainerStyle: {},\n    emptyMonthTextStyle: {\n      fontWeight: '200',\n    },\n    weekColumnsContainerStyle: {},\n    weekColumnStyle: {\n      paddingVertical: 10,\n    },\n    weekColumnTextStyle: {\n      color: '#b6c1cd',\n      fontSize: 13,\n    },\n    nonTouchableDayContainerStyle: {},\n    nonTouchableDayTextStyle: {},\n    startDateContainerStyle: {},\n    endDateContainerStyle: {},\n    dayContainerStyle: {},\n    dayTextStyle: {\n      color: '#2d4150',\n      fontWeight: '200',\n      fontSize: 15,\n    },\n    dayOutOfRangeContainerStyle: {},\n    dayOutOfRangeTextStyle: {},\n    todayContainerStyle: {},\n    todayTextStyle: {\n      color: '#6d95da',\n    },\n    activeDayContainerStyle: {\n      backgroundColor: '#6d95da',\n    },\n    activeDayTextStyle: {\n      color: 'white',\n    },\n    nonTouchableLastMonthDayTextStyle: {},\n  }}/>\n      );\n    }\n  }\n\n    // const { selectedStartDate } = this.state;\n    // const startDate = selectedStartDate ? selectedStartDate.toString() : '';\n"]},"metadata":{},"sourceType":"module"}